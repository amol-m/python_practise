# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BIVVNtI9tPOy58ff9v15aM3PO765H9sY
"""

import sqlalchemy
# do a pip install pymysql
#import pymysql
###################
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
sns.set()

from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import OneHotEncoder
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.base import BaseEstimator, TransformerMixin


df = pd.read_csv('customer_churn.csv')

X = df.iloc[:,:-1]
y = df.iloc[:,-1]
cols_to_drop = ['RowNumber','CustomerId','Surname']

class DropFeatureTransformer(BaseEstimator, TransformerMixin):
    def __init__(self,cols_to_drop):
      self.cols_to_drop = cols_to_drop

    def fit(self, x , y=None  ):
      print('in the DropFeatureTransformer fit method: ')
      print(x)
      return self
        
    def transform(self, x , y=None  ):
      print('in the DropFeatureTransformer transform method: ')
      #   #remove columns from dataset
      
      for colname in self.cols_to_drop:
         #print(colname)
         x.drop(colname, axis=1, inplace=True)
      print(x.columns)
      return x

drop_pipe = Pipeline(
    steps=[
        ('drop_cols', DropFeatureTransformer(cols_to_drop))
    ]
)

X = drop_pipe.fit_transform(X)

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=.25)

cat_cols=X.select_dtypes(include="object").columns
num_cols= X.select_dtypes(exclude="object").columns


# Cat Tranformer 
categorical_tranformer= Pipeline(steps=[('ohe',OneHotEncoder(sparse=False))])

# Num tranfoemr
numerical_tranformer = Pipeline(steps=[('sc',StandardScaler())])

col_tranform= ColumnTransformer(transformers=[         									                    
                                      ('cat_feat',categorical_tranformer,cat_cols),
                                      ('num_feat',numerical_tranformer,num_cols)									 
                                        ],
                                     remainder='passthrough')
									 
my_pipeline= Pipeline(steps=[('first_pipe',col_tranform),('model',LogisticRegression())])

my_pipeline.fit(X_train,y_train)

y_pred= my_pipeline.predict(X_test)


pd.Series(accuracy_score(y_test,y_pred))
